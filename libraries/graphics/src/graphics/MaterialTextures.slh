<!
//  MaterialTextures.slh
//  fragment shader
//
//  Created by Sam Gateau on 2/22/16
//  Copyright 2016 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MODEL_MATERIAL_TEXTURES_SLH@>
<@def MODEL_MATERIAL_TEXTURES_SLH@>

<@include graphics/ShaderConstants.h@>
<@include graphics/Material.slh@>

#define TAA_TEXTURE_LOD_BIAS    -1.0

<@if not HIFI_USE_TRIPLANAR@>

<@func evalMaterialNormalLOD(fragPosES, fetchedNormal, interpolatedNormal, interpolatedTangent, normal)@>
{
    vec3 normalizedNormal = normalize(<$interpolatedNormal$>.xyz);
    vec3 normalizedTangent = normalize(<$interpolatedTangent$>.xyz);
    vec3 normalizedBitangent = cross(normalizedNormal, normalizedTangent);
    // attenuate the normal map divergence from the mesh normal based on distance
    // The attenuation range [30,100] meters from the eye is arbitrary for now
    vec3 localNormal = mix(<$fetchedNormal$>, vec3(0.0, 1.0, 0.0), smoothstep(30.0, 100.0, (-<$fragPosES$>).z));
    <$normal$> = normalize(vec3(normalizedBitangent * localNormal.x + normalizedNormal * localNormal.y + normalizedTangent * localNormal.z));
}
<@endfunc@>

<@else@>

// In triplanar mode, fetchedNormal is already in world space
<@func evalMaterialNormalLODTriplanar(fragPosES, fetchedNormal, interpolatedNormal, normal)@>
{
    // attenuate the normal map divergence from the mesh normal based on distance
    // The attenuation range [30,100] meters from the eye is arbitrary for now
    <$normal$> = mix(<$fetchedNormal$>, <$interpolatedNormal$>, smoothstep(30.0, 100.0, (-<$fragPosES$>).z));
}
<@endfunc@>

<@endif@>

<@func evalMaterialAlbedo(fetchedAlbedo, materialAlbedo, matKey, albedo)@>
{
    <$albedo$>.xyz = mix(vec3(1.0), <$materialAlbedo$>, float((<$matKey$> & ALBEDO_VAL_BIT) != 0));
    <$albedo$>.xyz *= mix(vec3(1.0), <$fetchedAlbedo$>.xyz, float((<$matKey$> & ALBEDO_MAP_BIT) != 0));
}
<@endfunc@>

<@func evalMaterialOpacityMask(fetchedOpacity, materialOpacityCutoff, materialOpacity, matKey, opacity)@>
{
    // This path only valid for opaque or texel opaque material
    <$opacity$> = mix(<$materialOpacity$>,
                      step(<$materialOpacityCutoff$>, <$fetchedOpacity$>),
                      float((<$matKey$> & OPACITY_MASK_MAP_BIT) != 0));
}
<@endfunc@>

<@func evalMaterialOpacity(fetchedOpacity, materialOpacityCutoff, materialOpacity, matKey, opacity)@>
{
    // This path only valid for transparent material
    <$opacity$> = mix(<$fetchedOpacity$>,
                          step(<$materialOpacityCutoff$>, <$fetchedOpacity$>),
                          float((<$matKey$> & OPACITY_MASK_MAP_BIT) != 0))
                       * <$materialOpacity$>;
}
<@endfunc@>

<@func evalMaterialEmissive(fetchedEmissive, materialEmissive, matKey, emissive)@>
{
    <$emissive$> = mix(<$materialEmissive$>, <$fetchedEmissive$>, float((<$matKey$> & EMISSIVE_MAP_BIT) != 0));
}
<@endfunc@>

<@func discardTransparent(opacity)@>
{
    if (<$opacity$> < 1.0) {
        discard;
    }
}
<@endfunc@>
<@func discardInvisible(opacity)@>
{
    if (<$opacity$> <= 0.0) {
        discard;
    }
}
<@endfunc@>

<@if not HIFI_USE_MTOON@>
<@func declareMaterialTextures(withAlbedo, withRoughness, withNormal, withMetallic, withEmissive, withOcclusion, withScattering)@>

<@include gpu/TextureTable.slh@>

#ifdef GPU_TEXTURE_TABLE_BINDLESS

TextureTable(0, matTex);
<!
    ALBEDO = 0,
    NORMAL, 1
    METALLIC, 2
    EMISSIVE_LIGHTMAP, 3
    ROUGHNESS, 4
    OCCLUSION, 5
    SCATTERING, 6
!>

<@if withAlbedo@>
#define albedoMap 0
vec4 fetchAlbedoMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_ALBEDO);
    // Should take into account TAA_TEXTURE_LOD_BIAS?
    return tableTexValue(matTex, albedoMap, uv);
}
<@endif@>

<@if withNormal@>
#define normalMap 1
vec3 fetchNormalMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_NORMAL);
    // Should take into account TAA_TEXTURE_LOD_BIAS?
    return tableTexValue(matTex, normalMap, uv).xyz;
}
<@endif@>

<@if withMetallic@>
#define metallicMap 2
float fetchMetallicMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_METALLIC);
    // Should take into account TAA_TEXTURE_LOD_BIAS?
    return tableTexValue(matTex, metallicMap, uv).r;
}
<@endif@>

<@if withEmissive@>
#define emissiveMap 3
vec3 fetchEmissiveMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP);
    // Should take into account TAA_TEXTURE_LOD_BIAS?
    return tableTexValue(matTex, emissiveMap, uv).rgb;
}
<@endif@>

<@if withRoughness@>
#define roughnessMap 4
float fetchRoughnessMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS);
    // Should take into account TAA_TEXTURE_LOD_BIAS?
    return tableTexValue(matTex, roughnessMap, uv).r;
}
<@endif@>

<@if withOcclusion@>
#define occlusionMap 5
float fetchOcclusionMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_OCCLUSION);
    return tableTexValue(matTex, occlusionMap, uv).r;
}
<@endif@>

<@if withScattering@>
#define scatteringMap 6
float fetchScatteringMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_SCATTERING);
    float scattering = texture(tableTex(matTex, scatteringMap), uv).r; // boolean scattering for now
    return max(((scattering - 0.1) / 0.9), 0.0);
    return tableTexValue(matTex, scatteringMap, uv).r; // boolean scattering for now
}
<@endif@>

#else

<@if withAlbedo@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_ALBEDO) uniform sampler2D albedoMap;
vec4 fetchAlbedoMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_ALBEDO);
    return texture(albedoMap, uv, TAA_TEXTURE_LOD_BIAS);
}
<@endif@>

<@if withNormal@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_NORMAL) uniform sampler2D normalMap;
vec3 fetchNormalMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_NORMAL);
    // unpack normal, swizzle to get into hifi tangent space with Y axis pointing out
    vec2 t = 2.0 * (texture(normalMap, uv, TAA_TEXTURE_LOD_BIAS).rg - vec2(0.5, 0.5));
    vec2 t2 = t*t;
    return vec3(t.x, sqrt(max(0.0, 1.0 - t2.x - t2.y)), t.y);
}
<@endif@>

<@if withMetallic@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_METALLIC) uniform sampler2D metallicMap;
float fetchMetallicMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_METALLIC);
    return (texture(metallicMap, uv, TAA_TEXTURE_LOD_BIAS).r);
}
<@endif@>

<@if withEmissive@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP) uniform sampler2D emissiveMap;
vec3 fetchEmissiveMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP);
    return texture(emissiveMap, uv, TAA_TEXTURE_LOD_BIAS).rgb;
}
<@endif@>

<@if withRoughness@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS) uniform sampler2D roughnessMap;
float fetchRoughnessMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS);
    return (texture(roughnessMap, uv, TAA_TEXTURE_LOD_BIAS).r);
}
<@endif@>

<@if withOcclusion@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_OCCLUSION) uniform sampler2D occlusionMap;
float fetchOcclusionMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_OCCLUSION);
    return texture(occlusionMap, uv).r;
}
<@endif@>

<@if withScattering@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_SCATTERING) uniform sampler2D scatteringMap;
float fetchScatteringMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_SCATTERING);
    float scattering = texture(scatteringMap, uv, TAA_TEXTURE_LOD_BIAS).r; // boolean scattering for now
    return max(((scattering - 0.1) / 0.9), 0.0);
    return texture(scatteringMap, uv).r; // boolean scattering for now
}
<@endif@>

#endif

<@endfunc@>

<@func declareMaterialLightmap()@>

<$declareMaterialTexMapArrayBuffer()$>

LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP) uniform sampler2D emissiveMap;
vec3 fetchLightMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP);
    vec2 lightmapParams = getTexMapArray()._lightmapParams;
    return (vec3(lightmapParams.x) + lightmapParams.y * texture(emissiveMap, uv).rgb);
}
<@endfunc@>

<@func fetchMaterialTextures(matKey, texcoords, albedo, roughness, normal, metallic, emissive, scattering, occlusion, lightmap)@>
    vec2 albedoTexCoords = evalTexCoordSet(<$texcoords$>, GRAPHICS_TEXTURE_MATERIAL_ALBEDO);
    if (getTexMapArray()._materialParams.y != 1.0 && clamp(albedoTexCoords, vec2(0.0), vec2(1.0)) != albedoTexCoords) {
        discard;
    }
<@if albedo@>
    vec4 <$albedo$> = mix(vec4(1.0), fetchAlbedoMap(<$texcoords$>), float((<$matKey$> & (ALBEDO_MAP_BIT | OPACITY_MASK_MAP_BIT | OPACITY_TRANSLUCENT_MAP_BIT)) != 0));
<@endif@>
<@if roughness@>
    float <$roughness$> = mix(1.0, fetchRoughnessMap(<$texcoords$>), float((<$matKey$> & ROUGHNESS_MAP_BIT) != 0));
<@endif@>
<@if normal@>
    vec3 <$normal$> = mix(vec3(0.0, 1.0, 0.0), fetchNormalMap(<$texcoords$>), float((<$matKey$> & NORMAL_MAP_BIT) != 0));
<@endif@>
<@if metallic@>
    float <$metallic$> = float((<$matKey$> & METALLIC_MAP_BIT) != 0) * fetchMetallicMap(<$texcoords$>);
<@endif@>
<@if emissive@>
    vec3 <$emissive$> = float((<$matKey$> & EMISSIVE_MAP_BIT) != 0) * fetchEmissiveMap(<$texcoords$>);
<@endif@>
<@if scattering@>
    float <$scattering$> = float((<$matKey$> & SCATTERING_MAP_BIT) != 0) * fetchScatteringMap(<$texcoords$>);
<@endif@>
<@if occlusion@>
    float <$occlusion$> = mix(1.0, fetchOcclusionMap(<$texcoords$>), float((<$matKey$> & OCCLUSION_MAP_BIT) != 0));
<@endif@>
<@if lightmap@>
    vec3 <$lightmap$> = fetchLightMap(<$texcoords$>);
<@endif@>
<@endfunc@>

<@if HIFI_USE_TRIPLANAR@>

<@func fetchMaterialTexturesTriplanar(matKey, positionMS, normalMS, texCoord1, triplanarScale, albedo, roughness, normal, metallic, emissive, scattering, occlusion, lightmap)@>
    vec3 inPosition = (<$positionMS$> - vec3(0.5)) / <$triplanarScale$>.xyz;
    vec3 normalMS = normalize(<$normalMS$>);

    // From https://bgolus.medium.com/normal-mapping-for-a-triplanar-shader-10bf39dca05a
    vec3 blend = abs(normalMS.xyz);
    blend = max(blend - 0.2, vec3(0.0));
    blend /= (blend.x + blend.y + blend.z);

<@if normal@>
    vec3 axisSign = sign(normalMS.xyz);
<@endif@>

    TexMapArray texMapArray = getTexMapArray();
    vec2 uvXY = vec2(-inPosition.x, -inPosition.y);
    <$evalTexMapArrayTexcoord0(texMapArray, uvXY, _positionWS, uvXY)$>
    vec2 uvXZ = vec2(-inPosition.x, inPosition.z);
    <$evalTexMapArrayTexcoord0(texMapArray, uvXZ, _positionWS, uvXZ)$>
    vec2 uvYZ = vec2(inPosition.z, -inPosition.y);
    <$evalTexMapArrayTexcoord0(texMapArray, uvYZ, _positionWS, uvYZ)$>

<@if albedo@>
    vec4 <$albedo$>Triplanar = vec4(0.0);
<@endif@>
<@if roughness@>
    float <$roughness$>Triplanar = 0.0;
<@endif@>
<@if normal@>
    vec3 <$normal$>Triplanar = vec3(0.0);
<@endif@>
<@if metallic@>
    float <$metallic$>Triplanar = 0.0;
<@endif@>
<@if emissive@>
    vec3 <$emissive$>Triplanar = vec3(0.0);
<@endif@>
<@if scattering@>
    float <$scattering$>Triplanar = 0.0;
<@endif@>
<@if occlusion@>
    float <$occlusion$>Triplanar = 0.0;
<@endif@>
<@if lightmap@>
    vec3 <$lightmap$>Triplanar = vec3(0.0);
<@endif@>

    {
        mat2 triplanarUVs = mat2(uvXY, <$texCoord1$>);
        <$fetchMaterialTextures($matKey$, triplanarUVs, $albedo$, $roughness$, $normal$, $metallic$, $emissive$, $scattering$, $occlusion$, $lightmap$)$>
        float magnitude = blend.z;
        <@if albedo@>
            <$albedo$>Triplanar += magnitude * <$albedo$>;
        <@endif@>
        <@if roughness@>
            <$roughness$>Triplanar += magnitude * <$roughness$>;
        <@endif@>
        <@if normal@>
            vec3 tangentNormal = <$normal$>;
            tangentNormal.y *= axisSign.z;
            <$normal$>Triplanar += magnitude * vec3(-1, 1, 1) * tangentNormal.zxy;
        <@endif@>
        <@if metallic@>
            <$metallic$>Triplanar += magnitude * <$metallic$>;
        <@endif@>
        <@if emissive@>
            <$emissive$>Triplanar += magnitude * <$emissive$>;
        <@endif@>
        <@if scattering@>
            <$scattering$>Triplanar += magnitude * <$scattering$>;
        <@endif@>
        <@if occlusion@>
            <$occlusion$>Triplanar += magnitude * <$occlusion$>;
        <@endif@>
        <@if lightmap@>
            <$lightmap$>Triplanar += magnitude * <$lightmap$>;
        <@endif@>
    }

    {
        mat2 triplanarUVs = mat2(uvXZ, <$texCoord1$>);
        <$fetchMaterialTextures($matKey$, triplanarUVs, $albedo$, $roughness$, $normal$, $metallic$, $emissive$, $scattering$, $occlusion$, $lightmap$)$>
        float magnitude = blend.y;
        <@if albedo@>
            <$albedo$>Triplanar += magnitude * <$albedo$>;
        <@endif@>
        <@if roughness@>
            <$roughness$>Triplanar += magnitude * <$roughness$>;
        <@endif@>
        <@if normal@>
            vec3 tangentNormal = <$normal$>;
            tangentNormal.y *= axisSign.y;
            <$normal$>Triplanar += magnitude * vec3(-1, 1, -1) * tangentNormal.zyx;
        <@endif@>
        <@if metallic@>
            <$metallic$>Triplanar += magnitude * <$metallic$>;
        <@endif@>
        <@if emissive@>
            <$emissive$>Triplanar += magnitude * <$emissive$>;
        <@endif@>
        <@if scattering@>
            <$scattering$>Triplanar += magnitude * <$scattering$>;
        <@endif@>
        <@if occlusion@>
            <$occlusion$>Triplanar += magnitude * <$occlusion$>;
        <@endif@>
        <@if lightmap@>
            <$lightmap$>Triplanar += magnitude * <$lightmap$>;
        <@endif@>
    }

    {
        mat2 triplanarUVs = mat2(uvYZ, <$texCoord1$>);
        <$fetchMaterialTextures($matKey$, triplanarUVs, $albedo$, $roughness$, $normal$, $metallic$, $emissive$, $scattering$, $occlusion$, $lightmap$)$>
        float magnitude = blend.x;
        <@if albedo@>
            <$albedo$>Triplanar += magnitude * <$albedo$>;
        <@endif@>
        <@if roughness@>
            <$roughness$>Triplanar += magnitude * <$roughness$>;
        <@endif@>
        <@if normal@>
            vec3 tangentNormal = <$normal$>;
            tangentNormal.y *= axisSign.x;
            <$normal$>Triplanar += magnitude * tangentNormal.yxz;
        <@endif@>
        <@if metallic@>
            <$metallic$>Triplanar += magnitude * <$metallic$>;
        <@endif@>
        <@if emissive@>
            <$emissive$>Triplanar += magnitude * <$emissive$>;
        <@endif@>
        <@if scattering@>
            <$scattering$>Triplanar += magnitude * <$scattering$>;
        <@endif@>
        <@if occlusion@>
            <$occlusion$>Triplanar += magnitude * <$occlusion$>;
        <@endif@>
        <@if lightmap@>
            <$lightmap$>Triplanar += magnitude * <$lightmap$>;
        <@endif@>
    }

<@if albedo@>
    vec4 <$albedo$> = <$albedo$>Triplanar;
<@endif@>
<@if roughness@>
    float <$roughness$> = <$roughness$>Triplanar;
<@endif@>
<@if normal@>
    vec3 <$normal$> = normalize(<$normal$>Triplanar + normalMS.xyz);
    {
        TransformObject obj = getTransformObject();
        <$transformModelToWorldDir(obj, $normal$, $normal$)$>
    }
<@endif@>
<@if metallic@>
    float <$metallic$> = <$metallic$>Triplanar;
<@endif@>
<@if emissive@>
    vec3 <$emissive$> = <$emissive$>Triplanar;
<@endif@>
<@if scattering@>
    float <$scattering$> = <$scattering$>Triplanar;
<@endif@>
<@if occlusion@>
    float <$occlusion$> = <$occlusion$>Triplanar;
<@endif@>
<@if lightmap@>
    vec3 <$lightmap$> = <$lightmap$>Triplanar;
<@endif@>

<@endfunc@>

<@endif@>

<@func evalMaterialRoughness(fetchedRoughness, materialRoughness, matKey, roughness)@>
{
    <$roughness$> = mix(<$materialRoughness$>, <$fetchedRoughness$>, float((<$matKey$> & ROUGHNESS_MAP_BIT) != 0));
}
<@endfunc@>

<@func evalMaterialMetallic(fetchedMetallic, materialMetallic, matKey, metallic)@>
{
    <$metallic$> = mix(<$materialMetallic$>, <$fetchedMetallic$>, float((<$matKey$> & METALLIC_MAP_BIT) != 0));
}
<@endfunc@>

<@func evalMaterialOcclusion(fetchedOcclusion, matKey, occlusion)@>
{
    <$occlusion$> = <$fetchedOcclusion$>;
}
<@endfunc@>

<@func evalMaterialScattering(fetchedScattering, materialScattering, matKey, scattering)@>
{
    <$scattering$> = mix(<$materialScattering$>, <$fetchedScattering$>, float((<$matKey$> & SCATTERING_MAP_BIT) != 0));
}
<@endfunc@>
<@else@>
<@func declareMToonMaterialTextures(withAlbedo, withNormal, withShade, withEmissive, withShadingShift, withMatcap, withRim, withUVAnimationMask)@>

<@include gpu/TextureTable.slh@>

#ifdef GPU_TEXTURE_TABLE_BINDLESS

TextureTable(0, matTex);
<!
    ALBEDO = 0,
    NORMAL, 1
    SHADE, 2
    EMISSIVE, 3
    SHADING_SHIFT, 4
    MATCAP, 5
    RIM, 6
    UV_ANIMATION_MASK, 7
!>

<@if withAlbedo@>
#define albedoMap 0
vec4 fetchAlbedoMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_ALBEDO);
    return tableTexValue(matTex, albedoMap, uv);
}
<@endif@>

<@if withNormal@>
#define normalMap 1
vec3 fetchNormalMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_NORMAL);
    return tableTexValue(matTex, normalMap, uv).xyz;
}
<@endif@>

<@if withShade@>
#define shadeMap 2
vec3 fetchShadeMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_SHADE);
    return tableTexValue(matTex, shadeMap, uv).rgb;
}
<@endif@>

<@if withEmissive@>
#define emissiveMap 3
vec3 fetchEmissiveMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP);
    return tableTexValue(matTex, emissiveMap, uv).rgb;
}
<@endif@>

<@if withShadingShift@>
#define shadingShiftMap 4
float fetchShadingShiftMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_SHADING_SHIFT);
    return tableTexValue(matTex, shadingShiftMap, uv).r;
}
<@endif@>

<@if withMatcap@>
#define matcapMap 5
vec3 fetchMatcapMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_MATCAP);
    return tableTexValue(matTex, matcapMap, uv).rgb;
}
<@endif@>

<@if withRim@>
#define rimMap 6
vec3 fetchRimMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_RIM);
    return tableTexValue(matTex, rimMap, uv).rgb;
}
<@endif@>

<@if withUVAnimationMask@>
#define uvAnimationMaskMap 7
float fetchUVAnimationMaskMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_UV_ANIMATION_MASK);
    return tableTexValue(matTex, uvAnimationMaskMap, uv).r;
}
<@endif@>

#else

<@if withAlbedo@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_ALBEDO) uniform sampler2D albedoMap;
vec4 fetchAlbedoMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_ALBEDO);
    return texture(albedoMap, uv, TAA_TEXTURE_LOD_BIAS);
}
<@endif@>

<@if withNormal@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_NORMAL) uniform sampler2D normalMap;
vec3 fetchNormalMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_NORMAL);
    // unpack normal, swizzle to get into hifi tangent space with Y axis pointing out
    vec2 t = 2.0 * (texture(normalMap, uv, TAA_TEXTURE_LOD_BIAS).rg - vec2(0.5, 0.5));
    vec2 t2 = t*t;
    return vec3(t.x, sqrt(max(0.0, 1.0 - t2.x - t2.y)), t.y);
}
<@endif@>

<@if withShade@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_SHADE) uniform sampler2D shadeMap;
vec3 fetchShadeMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_SHADE);
    return texture(shadeMap, uv, TAA_TEXTURE_LOD_BIAS).rgb;
}
<@endif@>

<@if withEmissive@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP) uniform sampler2D emissiveMap;
vec3 fetchEmissiveMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP);
    return texture(emissiveMap, uv, TAA_TEXTURE_LOD_BIAS).rgb;
}
<@endif@>

<@if withShadingShift@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_SHADING_SHIFT) uniform sampler2D shadingShiftMap;
float fetchShadingShiftMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_SHADING_SHIFT);
    return texture(shadingShiftMap, uv, TAA_TEXTURE_LOD_BIAS).r;
}
<@endif@>

<@if withMatcap@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_MATCAP) uniform sampler2D matcapMap;
vec3 fetchMatcapMap(vec2 uv) {
    return texture(matcapMap, uv, TAA_TEXTURE_LOD_BIAS).rgb;
}
<@endif@>

<@if withRim@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_RIM) uniform sampler2D rimMap;
vec3 fetchRimMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_RIM);
    return texture(rimMap, uv, TAA_TEXTURE_LOD_BIAS).rgb;
}
<@endif@>

<@if withUVAnimationMask@>
LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_UV_ANIMATION_MASK) uniform sampler2D uvAnimationMaskMap;
float fetchUVAnimationMaskMap(mat2 uvs) {
    vec2 uv = evalTexCoordSet(uvs, GRAPHICS_TEXTURE_MATERIAL_UV_ANIMATION_MASK);
    return texture(uvAnimationMaskMap, uv, TAA_TEXTURE_LOD_BIAS).r;
}
<@endif@>

#endif

<@endfunc@>

<@func fetchMToonMaterialTextures(matKey, texcoords, albedo, normal, shade, emissive, shadingShift, rim, uvScrollSpeed, time)@>
    vec2 albedoTexCoords = evalTexCoordSet(<$texcoords$>, GRAPHICS_TEXTURE_MATERIAL_ALBEDO);
    if (getTexMapArray()._materialParams.y != 1.0 && clamp(albedoTexCoords, vec2(0.0), vec2(1.0)) != albedoTexCoords) {
        discard;
    }

    vec2 texCoord = <$texcoords$>[0];

<@if uvScrollSpeed and time@>
    if ((<$matKey$> & UV_ANIMATION_SCROLL_VAL_BIT) != 0) {
        <$uvScrollSpeed$> *= mix(1.0, fetchUVAnimationMaskMap(<$texcoords$>), float((<$matKey$> & UV_ANIMATION_MASK_MAP_BIT) != 0));
        <$uvScrollSpeed$> *= time;
        float cosTime = cos(<$uvScrollSpeed$>.z);
        float sinTime = sin(<$uvScrollSpeed$>.z);
        texCoord = (mat3(cosTime, sinTime, 0, -sinTime, cosTime, 0, 0, 0, 1) * vec3(texCoord - vec2(0.5), 1.0)).xy + vec2(0.5) + <$uvScrollSpeed$>.xy;
    }
<@endif@>

    mat2 texCoordsMToon = mat2(texCoord, <$texcoords$>[1]);

<@if albedo@>
    vec4 <$albedo$> = mix(vec4(1.0), fetchAlbedoMap(texCoordsMToon), float((<$matKey$> & (ALBEDO_MAP_BIT | OPACITY_MASK_MAP_BIT | OPACITY_TRANSLUCENT_MAP_BIT)) != 0));
<@endif@>
<@if normal@>
    vec3 <$normal$> = mix(vec3(0.0, 1.0, 0.0), fetchNormalMap(texCoordsMToon), float((<$matKey$> & NORMAL_MAP_BIT) != 0));
<@endif@>
<@if shade@>
    vec3 <$shade$> = float((<$matKey$> & SHADE_MAP_BIT) != 0) * fetchShadeMap(texCoordsMToon);
<@endif@>
<@if emissive@>
    vec3 <$emissive$> = float((<$matKey$> & EMISSIVE_MAP_BIT) != 0) * fetchEmissiveMap(texCoordsMToon);
<@endif@>
<@if shadingShift@>
    float <$shadingShift$> = float((<$matKey$> & SHADING_SHIFT_MAP_BIT) != 0) * fetchShadingShiftMap(texCoordsMToon);
<@endif@>
<@if rim@>
    vec3 <$rim$> = mix(vec3(1.0), fetchRimMap(texCoordsMToon), float((<$matKey$> & RIM_MAP_BIT) != 0));
<@endif@>
<@endfunc@>

<@if HIFI_USE_TRIPLANAR@>

<@func fetchMToonMaterialTexturesTriplanar(matKey, positionMS, normalMS, texCoord1, triplanarScale, albedo, normal, shade, emissive, shadingShift, rim, uvScrollSpeed, time)@>
    vec3 inPosition = (<$positionMS$> - vec3(0.5)) / <$triplanarScale$>.xyz;
    vec3 normalMS = normalize(<$normalMS$>);

    // From https://bgolus.medium.com/normal-mapping-for-a-triplanar-shader-10bf39dca05a
    vec3 blend = abs(normalMS.xyz);
    blend = max(blend - 0.2, vec3(0.0));
    blend /= (blend.x + blend.y + blend.z);

<@if normal@>
    vec3 axisSign = sign(normalMS.xyz);
<@endif@>

    TexMapArray texMapArray = getTexMapArray();
    vec2 uvXY = vec2(-inPosition.x, -inPosition.y);
    <$evalTexMapArrayTexcoord0(texMapArray, uvXY, _positionWS, uvXY)$>
    vec2 uvXZ = vec2(-inPosition.x, inPosition.z);
    <$evalTexMapArrayTexcoord0(texMapArray, uvXZ, _positionWS, uvXZ)$>
    vec2 uvYZ = vec2(inPosition.z, -inPosition.y);
    <$evalTexMapArrayTexcoord0(texMapArray, uvYZ, _positionWS, uvYZ)$>

<@if albedo@>
    vec4 <$albedo$>Triplanar = vec4(0.0);
<@endif@>
<@if normal@>
    vec3 <$normal$>Triplanar = vec3(0.0);
<@endif@>
<@if shade@>
    vec3 <$shade$>Triplanar = vec3(0.0);
<@endif@>
<@if emissive@>
    vec3 <$emissive$>Triplanar = vec3(0.0);
<@endif@>
<@if shadingShift@>
    float <$shadingShift$>Triplanar = 0.0;
<@endif@>
<@if rim@>
    vec3 <$rim$>Triplanar = vec3(0.0);
<@endif@>

    {
        mat2 triplanarUVs = mat2(uvXY, <$texCoord1$>);
        <$fetchMToonMaterialTextures($matKey$, triplanarUVs, $albedo$, $normal$, $shade$, $emissive$, $shadingShift$, $rim$, $uvScrollSpeed$, $time$)$>
        float magnitude = blend.z;
        <@if albedo@>
            <$albedo$>Triplanar += magnitude * <$albedo$>;
        <@endif@>
        <@if normal@>
            vec3 tangentNormal = <$normal$>;
            tangentNormal.y *= axisSign.z;
            <$normal$>Triplanar += magnitude * vec3(-1, 1, 1) * tangentNormal.zxy;
        <@endif@>
        <@if shade@>
            <$shade$>Triplanar += magnitude * <$shade$>;
        <@endif@>
        <@if emissive@>
            <$emissive$>Triplanar += magnitude * <$emissive$>;
        <@endif@>
        <@if shadingShift@>
            <$shadingShift$>Triplanar += magnitude * <$shadingShift$>;
        <@endif@>
        <@if rim@>
            <$rim$>Triplanar += magnitude * <$rim$>;
        <@endif@>
    }

    {
        mat2 triplanarUVs = mat2(uvXZ, <$texCoord1$>);
        <$fetchMToonMaterialTextures($matKey$, triplanarUVs, $albedo$, $normal$, $shade$, $emissive$, $shadingShift$, $rim$, $uvScrollSpeed$, $time$)$>
        float magnitude = blend.y;
        <@if albedo@>
            <$albedo$>Triplanar += magnitude * <$albedo$>;
        <@endif@>
        <@if normal@>
            vec3 tangentNormal = <$normal$>;
            tangentNormal.y *= axisSign.y;
            <$normal$>Triplanar += magnitude * vec3(-1, 1, -1) * tangentNormal.zyx;
        <@endif@>
        <@if shade@>
            <$shade$>Triplanar += magnitude * <$shade$>;
        <@endif@>
        <@if emissive@>
            <$emissive$>Triplanar += magnitude * <$emissive$>;
        <@endif@>
        <@if shadingShift@>
            <$shadingShift$>Triplanar += magnitude * <$shadingShift$>;
        <@endif@>
        <@if rim@>
            <$rim$>Triplanar += magnitude * <$rim$>;
        <@endif@>
    }

    {
        mat2 triplanarUVs = mat2(uvYZ, <$texCoord1$>);
        <$fetchMToonMaterialTextures($matKey$, triplanarUVs, $albedo$, $normal$, $shade$, $emissive$, $shadingShift$, $rim$, $uvScrollSpeed$, $time$)$>
        float magnitude = blend.x;
        <@if albedo@>
            <$albedo$>Triplanar += magnitude * <$albedo$>;
        <@endif@>
        <@if normal@>
            vec3 tangentNormal = <$normal$>;
            tangentNormal.y *= axisSign.x;
            <$normal$>Triplanar += magnitude * tangentNormal.yxz;
        <@endif@>
        <@if shade@>
            <$shade$>Triplanar += magnitude * <$shade$>;
        <@endif@>
        <@if emissive@>
            <$emissive$>Triplanar += magnitude * <$emissive$>;
        <@endif@>
        <@if shadingShift@>
            <$shadingShift$>Triplanar += magnitude * <$shadingShift$>;
        <@endif@>
        <@if rim@>
            <$rim$>Triplanar += magnitude * <$rim$>;
        <@endif@>
    }

<@if albedo@>
    vec4 <$albedo$> = <$albedo$>Triplanar;
<@endif@>
<@if normal@>
    vec3 <$normal$> = normalize(<$normal$>Triplanar + normalMS.xyz);
    {
        TransformObject obj = getTransformObject();
        <$transformModelToWorldDir(obj, $normal$, $normal$)$>
    }
<@endif@>
<@if shade@>
    vec3 <$shade$> = <$shade$>Triplanar;
<@endif@>
<@if emissive@>
    vec3 <$emissive$> = <$emissive$>Triplanar;
<@endif@>
<@if shadingShift@>
    float <$shadingShift$> = <$shadingShift$>Triplanar;
<@endif@>
<@if rim@>
    vec3 <$rim$> = <$rim$>Triplanar;
<@endif@>

<@endfunc@>

<@endif@>

<@func evalMaterialShade(fetchedShade, materialShade, matKey, shade)@>
{
    <$shade$> = mix(vec3(1.0), <$materialShade$>, float((<$matKey$> & SHADE_VAL_BIT) != 0));
    <$shade$> *= mix(vec3(1.0), <$fetchedShade$>.rgb, float((<$matKey$> & SHADE_MAP_BIT) != 0));
}
<@endfunc@>

<@func evalMaterialShadingShift(fetchedShadingShift, materialShadingShift, matKey, shadingShift)@>
{
    <$shadingShift$> = mix(0.0, <$materialShadingShift$>, float((<$matKey$> & SHADING_SHIFT_VAL_BIT) != 0));
    <$shadingShift$> += mix(0.0, <$fetchedShadingShift$>, float((<$matKey$> & SHADING_SHIFT_MAP_BIT) != 0));
}
<@endfunc@>

<@func evalMaterialMatcap(texcoord, materialMatcap, matKey, matcap)@>
{
    if ((<$matKey$> & (MATCAP_VAL_BIT | MATCAP_MAP_BIT)) == 0) {
        <$matcap$> = vec3(0.0);
    } else {
        <$matcap$> = mix(vec3(1.0), <$materialMatcap$>, float((<$matKey$> & MATCAP_VAL_BIT) != 0));
        <$matcap$> *= mix(vec3(1.0), fetchMatcapMap(<$texcoord$>), float((<$matKey$> & MATCAP_MAP_BIT) != 0));
    }
}
<@endfunc@>

<@func evalMaterialUVScrollSpeed(fetchedUVScrollMask, materialUVScrollMask, matKey, uvScrollSpeed)@>
{
    <$uvScrollSpeed$> = mix(vec3(1.0), <$materialUVScrollMask$>, float((<$matKey$> & UV_ANIMATION_MASK_MAP_BIT) != 0));
    <$uvScrollSpeed$> *= mix(1.0, <$fetchedUVScrollMask$>.r, float((<$matKey$> & UV_ANIMATION_MASK_MAP_BIT) != 0));
}
<@endfunc@>
<@endif@>

<@endif@>
